@using Microsoft.CognitiveServices.Speech
@using Microsoft.CognitiveServices.Speech.Audio
@using WorkDot.Services;
@using WorkDot.Services.Common
@inject SpeechConfig config
@inject ChatCompletionService chatService
@inject ISnackbar Snackbar

<div class="d-flex flex-column align-center mt-5">
    <button class="record-button @((isListening) ? "active" : "")"
            @onclick="StartRecording"
            disabled="@isListening">
        <MudIcon Icon="@Icons.Material.Filled.MicNone" Title="Mic" Size="Size.Large" />
    </button>
    @if (conversation.Count > 0)
    {
        <MudPaper Elevation="0" Class="pa-4 overflow-y-auto my-6 chatpane">
            @foreach (var item in conversation)
            {
                <MudPaper Elevation="0" Class="mb-3 pa-3 d-inline-flex">
                    <MudStack Row="true">
                        <MudAvatar Size="Size.Medium" Variant="Variant.Filled">
                            <MudIcon Icon="@(string.Equals(item.Source, "U") ? Icons.Material.Filled.Person3 : Icons.Material.Filled.AutoAwesome)" />
                        </MudAvatar>
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <pre>@item.Text</pre>
                        </MudStack>
                    </MudStack>
                </MudPaper>
                <br />
            }
        </MudPaper>
    }
</div>

@code {
    private List<Message> conversation { get; set; } = new();
    private bool isListening { get; set; } = false;

    public async void StartRecording()
    {
        if (await Permissions.RequestAsync<Permissions.Microphone>() != PermissionStatus.Granted)
        {
            Snackbar.Add("Microphone Permission Denied", Severity.Error);
        }
        else
        {
            isListening = true;
            StateHasChanged();

            using var audioConfig = AudioConfig.FromDefaultMicrophoneInput();
            using var speechRecognizer = new SpeechRecognizer(config, audioConfig);

            try
            {
                var result = await speechRecognizer.RecognizeOnceAsync();
                conversation.Add(new Message() { Source = "U", Text = result.Text });
                conversation.Add(new Message() { Source = "W", Text = await chatService.GetResponseAsync(result.Text) });
            }
            catch (System.Exception ex)
            {
                Console.WriteLine(ex);
            }

            isListening = false;
            StateHasChanged();
        }
    }

    public class Message
    {
        public string? Source { get; set; }
        public string? Text { get; set; }
    }
}
